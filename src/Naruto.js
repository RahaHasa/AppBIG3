import React, { useState } from 'react';

const data = {
  characters: ['–ù–∞—Ä—É—Ç–æ', '–°–∞—Å–∫–µ', '–°–∞–∫—É—Ä–∞', '–ö–∞–∫–∞—à–∏', '–•–∏–Ω–∞—Ç–∞', '–ì–∞–∞—Ä–∞', '–®–∏–∫–∞–º–∞—Ä—É', '–ù—ç–¥–∂–∏', '–ò—Ç–∞—á–∏', '–û–±–∏—Ç–æ'],
  roles: ['–≥–µ–Ω–∏ÃÅ–Ω', '—á—ÉÃÅ–Ω–∏–Ω', '–¥–∂–æÃÅ–Ω–∏–Ω', '–∞–Ω–±—É', '—Å–µ–Ω—Å–µ–π', '–∫–∞–≥—ç', '–ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫ S-—Ä–∞–Ω–≥–∞'],
  places: ['–≤ –ö–æ–Ω–æ—Ö–µ', '–≤ –°—É–Ω–∞–≥–∞–∫—É—Ä–µ', '–≤ –ö–∏—Ä–∏–≥–∞–∫—É—Ä–µ', '–≤ –ö—É–º–æ–≥–∞–∫—É—Ä–µ', '–≤ –ò–≤–∞–≥–∞–∫—É—Ä–µ', '–≤ –ê–º–∞–≥–∞–∫—É—Ä–µ', '–≤ –¥–µ—Ä–µ–≤–Ω–µ –ó–≤—É–∫–∞', '–≤ –î–æ–ª–∏–Ω–µ –ö–æ–Ω—Ü–∞'],
  times: ['–≤–æ –≤—Ä–µ–º—è —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–∞ —á—É–Ω–∏–Ω–∞', '–ø–æ—Å–ª–µ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –ü—ç–π–Ω–∞', '–≤ –í–µ–ª–∏–∫—É—é –≤–æ–π–Ω—É —à–∏–Ω–æ–±–∏', '–≤–æ –≤—Ä–µ–º—è —é–Ω–æ—Å—Ç–∏', '–ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –°–∞—Å–∫–µ –≤ –ö–æ–Ω–æ—Ö—É'],
  ranks: ['–ì–µ–Ω–∏–Ω', '–ß—É–Ω–∏–Ω', '–î–∂–æ–Ω–∏–Ω', '–ê–Ω–±—É', '–ö–∞–≥—ç'],
  powers: ['–®–∞—Ä–∏–Ω–≥–∞–Ω', '–ë—å—è–∫—É–≥–∞–Ω', '–†–∏–Ω–Ω–µ–≥–∞–Ω', '–º—É–¥—Ä–æ—Å—Ç—å –æ—Ç—à–µ–ª—å–Ω–∏–∫–∞', '–≤–ª–∞–¥–µ–Ω–∏–µ —Å—Ç–∏—Ö–∏–µ–π –æ–≥–Ω—è', '–ø—Ä–∏–∑—ã–≤ –∂–∞–±', '–≤–ª–∞–¥–µ–Ω–∏–µ –†–∞—Å–µ–Ω–≥–∞–Ω–æ–º', '—Ç–µ–Ω–µ–≤—ã–µ –∫–ª–æ–Ω—ã', '–∫–æ–Ω—Ç—Ä–æ–ª—å –ø–µ—Å–∫–∞', '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ë–∏–¥–∂—É']
};

function Naruto({ goHome }) {
  const [formData, setFormData] = useState({
    mainCharacter: '',
    role: '',
    place: '',
    time: '',
    rank: '',
    power: '',
  });
  const [finalStory, setFinalStory] = useState('');

  const handleChange = (key) => (e) => {
    setFormData({ ...formData, [key]: e.target.value });
  };

  const generateStory = () => {
    const mainCharacter = formData.mainCharacter || getRandom(data.characters);
    const role = formData.role || getRandom(data.roles);
    const place = formData.place || getRandom(data.places);
    const time = formData.time || getRandom(data.times);
    const rank = formData.rank || getRandom(data.ranks);
    const power = formData.power || getRandom(data.powers);

    const story = `–ò—Å—Ç–æ—Ä–∏—è –Ω–∏–Ω–¥–∑—è:\n\n${mainCharacter} ‚Äî ${role} –∏–∑ ${place}, ${time}. –ò–º–µ–µ—Ç —Ä–∞–Ω–≥: ${rank}, –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${power}.\n\n–û–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∏–ª —Å–ª–µ–¥ –≤ –º–∏—Ä–µ —à–∏–Ω–æ–±–∏!`;

    setFinalStory(story);
  };

  const Select = ({ label, options, value, onChange }) => (
    <div className="w-full max-w-md">
      <label className="block mb-1 font-medium text-gray-700">{label}</label>
      <select
        className="w-full p-2 border border-gray-300 rounded"
        value={value}
        onChange={onChange}
      >
        <option value="">-- –í—ã–±–µ—Ä–∏ --</option>
        {options.map((option) => (
          <option key={option} value={option}>{option}</option>
        ))}
      </select>
    </div>
  );

  return (
    <div className="min-h-screen bg-naruto bg-cover bg-center flex flex-col items-center gap-6 p-6">
      <div className="bg-white/80 backdrop-blur-sm rounded-xl p-6 shadow-xl w-full max-w-3xl relative">
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-4xl font-bold text-orange-600 text-center w-full">Naruto: –°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ —à–∏–Ω–æ–±–∏</h1>
          {goHome && (
            <button
              onClick={goHome}
              className="absolute top-4 right-6 text-gray-500 hover:text-orange-500 text-2xl"
              title="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            >
              üè†
            </button>
          )}
        </div>

        {!finalStory && (
          <>
            <Select label="–ì–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂" options={data.characters} value={formData.mainCharacter} onChange={handleChange('mainCharacter')} />
            <Select label="–†–æ–ª—å" options={data.roles} value={formData.role} onChange={handleChange('role')} />
            <Select label="–ú–µ—Å—Ç–æ" options={data.places} value={formData.place} onChange={handleChange('place')} />
            <Select label="–í—Ä–µ–º—è" options={data.times} value={formData.time} onChange={handleChange('time')} />
            <Select label="–†–∞–Ω–≥" options={data.ranks} value={formData.rank} onChange={handleChange('rank')} />
            <Select label="–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å" options={data.powers} value={formData.power} onChange={handleChange('power')} />

            <button
              onClick={generateStory}
              className="bg-orange-500 hover:bg-orange-600 text-white font-semibold px-6 py-3 rounded shadow mt-4 w-full"
            >
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
            </button>
          </>
        )}

        {finalStory && (
          <>
            <div className="mt-6 bg-white p-6 rounded shadow text-lg text-gray-800 whitespace-pre-line">
              {finalStory}
            </div>
            <button
              onClick={() => {
                const randomForm = {
                  mainCharacter: getRandom(data.characters),
                  role: getRandom(data.roles),
                  place: getRandom(data.places),
                  time: getRandom(data.times),
                  rank: getRandom(data.ranks),
                  power: getRandom(data.powers),
                };
                const story = `–ò—Å—Ç–æ—Ä–∏—è –Ω–∏–Ω–¥–∑—è:\n\n${randomForm.mainCharacter} ‚Äî ${randomForm.role} –∏–∑ ${randomForm.place}, ${randomForm.time}. –ò–º–µ–µ—Ç —Ä–∞–Ω–≥: ${randomForm.rank}, –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: ${randomForm.power}.\n\n–û–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∏–ª —Å–ª–µ–¥ –≤ –º–∏—Ä–µ —à–∏–Ω–æ–±–∏!`;

                setFormData(randomForm);
                setFinalStory(story);
              }}
              className="mt-4 bg-orange-400 hover:bg-orange-500 text-white font-semibold px-6 py-3 rounded shadow w-full"
            >
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë –æ–¥–Ω—É –∏—Å—Ç–æ—Ä–∏—é
            </button>
          </>
        )}
      </div>
    </div>
  );
}

function getRandom(array) {
  return array[Math.floor(Math.random() * array.length)];
}

export default Naruto;
